/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Proyecto_Final;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.videoio.VideoCapture;

/**
 *
 * @author themisamus
 */
public class Principal extends javax.swing.JFrame {

    Imagen img = new Imagen();
    Imprime mostrar = new Imprime();
    Otsu otsu = new Otsu();
    Grafica_Histograma pinta = new Grafica_Histograma();
    Etiqueta eti = new Etiqueta();
    Calcula cal = new Calcula();
    Puntos points = new Puntos();

    Mat carga = new Mat();
    Mat gris = new Mat();
    int[] histo;
    int valor_umbral;
    /*
        camara
     */
    Mat take_ima = new Mat();
    //
    Mat binario = new Mat();
    double[][][] matriz_entrada;
    double[][][] matriz_salida;
    Stack num_marcas;
    Stack puntos;
    Stack solo_flechas;
    Mat pre_end = new Mat();
    Mat end = new Mat();

    /**
     * Creates new form Principal
     *
     * @throws java.io.IOException
     */
    public Principal() throws IOException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        CONTENEDOR = new javax.swing.JTabbedPane();
        contiene_imagen = new javax.swing.JPanel();
        label_load = new javax.swing.JLabel();
        b_carga = new javax.swing.JButton();
        b_gris = new javax.swing.JButton();
        b_grafica = new javax.swing.JButton();
        b_binario = new javax.swing.JButton();
        b_filtro = new javax.swing.JButton();
        b_sobreponer = new javax.swing.JButton();
        contiene_foto = new javax.swing.JPanel();
        label_take = new javax.swing.JLabel();
        b_take1 = new javax.swing.JButton();
        b_gris_f = new javax.swing.JButton();
        b_grafica_f = new javax.swing.JButton();
        b_binario_f = new javax.swing.JButton();
        b_filtro_f = new javax.swing.JButton();
        b_sobreponer_f = new javax.swing.JButton();
        open_cam = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Reconocimiento de Flechas");
        setLocation(new java.awt.Point(300, 100));
        setName("PRINCIPAL"); // NOI18N
        setSize(new java.awt.Dimension(800, 800));

        b_carga.setText("Cargar Imagen");
        b_carga.addActionListener((java.awt.event.ActionEvent evt) -> {
            b_cargaActionPerformed(evt);
        });

        b_gris.setText("Escala de Grises");
        b_gris.addActionListener((java.awt.event.ActionEvent evt) -> {
            b_grisActionPerformed(evt);
        });

        b_grafica.setText("Histo../Umbral");
        b_grafica.addActionListener((java.awt.event.ActionEvent evt) -> {
            b_graficaActionPerformed(evt);
        });

        b_binario.setText("Binarizaci贸n");
        b_binario.addActionListener((java.awt.event.ActionEvent evt) -> {
            b_binarioActionPerformed(evt);
        });

        b_filtro.setText("Filtraci贸n");
        b_filtro.addActionListener((java.awt.event.ActionEvent evt) -> {
            b_filtroActionPerformed(evt);
        });

        b_sobreponer.setText("Sobreponer");
        b_sobreponer.addActionListener((java.awt.event.ActionEvent evt) -> {
            b_sobreponerActionPerformed(evt);
        });

        javax.swing.GroupLayout contiene_imagenLayout = new javax.swing.GroupLayout(contiene_imagen);
        contiene_imagen.setLayout(contiene_imagenLayout);
        contiene_imagenLayout.setHorizontalGroup(
                contiene_imagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(contiene_imagenLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(label_load, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(contiene_imagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(b_carga)
                                        .addComponent(b_gris)
                                        .addComponent(b_grafica)
                                        .addComponent(b_binario)
                                        .addComponent(b_filtro)
                                        .addComponent(b_sobreponer))
                                .addContainerGap(31, Short.MAX_VALUE))
        );
        contiene_imagenLayout.setVerticalGroup(
                contiene_imagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(contiene_imagenLayout.createSequentialGroup()
                                .addGroup(contiene_imagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(contiene_imagenLayout.createSequentialGroup()
                                                .addGap(14, 14, 14)
                                                .addComponent(label_load, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(contiene_imagenLayout.createSequentialGroup()
                                                .addGap(47, 47, 47)
                                                .addComponent(b_carga)
                                                .addGap(18, 18, 18)
                                                .addComponent(b_gris)
                                                .addGap(18, 18, 18)
                                                .addComponent(b_grafica)
                                                .addGap(18, 18, 18)
                                                .addComponent(b_binario)
                                                .addGap(18, 18, 18)
                                                .addComponent(b_filtro)
                                                .addGap(18, 18, 18)
                                                .addComponent(b_sobreponer)))
                                .addContainerGap(16, Short.MAX_VALUE))
        );

        CONTENEDOR.addTab("LOAD", contiene_imagen);

        b_take1.setText("Tomar Foto");
        b_take1.addActionListener((java.awt.event.ActionEvent evt) -> {
            b_take1ActionPerformed(evt);
        });

        b_gris_f.setText("Escala de Grises");
        b_gris_f.addActionListener((java.awt.event.ActionEvent evt) -> {
            b_gris_fActionPerformed(evt);
        });

        b_grafica_f.setText("Histo../Umbral");
        b_grafica_f.addActionListener((java.awt.event.ActionEvent evt) -> {
            b_grafica_fActionPerformed(evt);
        });

        b_binario_f.setText("Binarizaci贸n");
        b_binario_f.addActionListener((java.awt.event.ActionEvent evt) -> {
            b_binario_fActionPerformed(evt);
        });

        b_filtro_f.setText("Filtraci贸n");
        b_filtro_f.addActionListener((java.awt.event.ActionEvent evt) -> {
            b_filtro_fActionPerformed(evt);
        });

        b_sobreponer_f.setText("Sobreponer");
        b_sobreponer_f.addActionListener((java.awt.event.ActionEvent evt) -> {
            b_sobreponer_fActionPerformed(evt);
        });

        open_cam.setText("Abrir Camara");
        open_cam.addActionListener((java.awt.event.ActionEvent evt) -> {
            open_camActionPerformed(evt);
        });

        javax.swing.GroupLayout contiene_fotoLayout = new javax.swing.GroupLayout(contiene_foto);
        contiene_foto.setLayout(contiene_fotoLayout);
        contiene_fotoLayout.setHorizontalGroup(
                contiene_fotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(contiene_fotoLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(label_take, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(contiene_fotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(b_take1)
                                        .addComponent(b_gris_f)
                                        .addComponent(b_grafica_f)
                                        .addComponent(b_binario_f)
                                        .addComponent(b_filtro_f)
                                        .addComponent(b_sobreponer_f)
                                        .addComponent(open_cam))
                                .addContainerGap(31, Short.MAX_VALUE))
        );
        contiene_fotoLayout.setVerticalGroup(
                contiene_fotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(contiene_fotoLayout.createSequentialGroup()
                                .addGroup(contiene_fotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(contiene_fotoLayout.createSequentialGroup()
                                                .addGap(14, 14, 14)
                                                .addComponent(label_take, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(contiene_fotoLayout.createSequentialGroup()
                                                .addGap(54, 54, 54)
                                                .addComponent(open_cam)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(b_take1)
                                                .addGap(18, 18, 18)
                                                .addComponent(b_gris_f)
                                                .addGap(18, 18, 18)
                                                .addComponent(b_grafica_f)
                                                .addGap(18, 18, 18)
                                                .addComponent(b_binario_f)
                                                .addGap(18, 18, 18)
                                                .addComponent(b_filtro_f)
                                                .addGap(18, 18, 18)
                                                .addComponent(b_sobreponer_f)))
                                .addContainerGap(16, Short.MAX_VALUE))
        );

        CONTENEDOR.addTab("TAKE", contiene_foto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(CONTENEDOR)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(CONTENEDOR))
        );

        pack();
    }// </editor-fold>                        

    private void b_cargaActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        /*
        String archivo="";
        JFileChooser selector=new JFileChooser();
        int resultado=selector.showOpenDialog(null);
        if(resultado==JFileChooser.APPROVE_OPTION){
            try {
                archivo=selector.getSelectedFile().getName();
                BufferedImage ima = ImageIO.read(selector.getSelectedFile());
                carga= img.buffer_a_mat(ima);
            } catch (IOException e) {
            }
        }
        */
        carga = img.cargar_img();
        Image salida = mostrar.sacar_img(carga);
        label_load.setIcon(new ImageIcon(salida));

    }

    private void b_graficaActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        histo = otsu.imageHistogram(img.a_buffer(carga));
        try {
            valor_umbral = otsu.umbral_Otsu(gris, histo);
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        CONTENEDOR.addTab("Histograma_c", null, pinta.creados(histo, valor_umbral));
    }

    private void b_grisActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        gris = img.a_gris(carga);
        Image salida = mostrar.sacar_img(gris);
        label_load.setIcon(new ImageIcon(salida));
    }

    private void b_binarioActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        binario = img.a_binario(gris, valor_umbral);
        Image salida = mostrar.sacar_img(binario);
        label_load.setIcon(new ImageIcon(salida));
    }

    private void b_filtroActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        matriz_entrada = eti.mat_a_matriz(binario);
        matriz_salida = eti.marca(matriz_entrada);
        num_marcas = points.cuenta_marcas(matriz_salida);
        puntos = points.cuenta_puntos_b(matriz_salida, num_marcas);
        solo_flechas = points.solo_flechas(num_marcas, puntos);
        pre_end = eti.contorno_pila(binario, matriz_salida, solo_flechas);
        Image salida = mostrar.sacar_img(pre_end);
        label_load.setIcon(new ImageIcon(salida));
    }

    private void b_sobreponerActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        end = eti.contorno_real(carga, binario, matriz_salida, solo_flechas);
        Image salida = mostrar.sacar_img(end);
        label_load.setIcon(new ImageIcon(salida));
    }

    private void b_take1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        VideoCapture take = new VideoCapture();
        take.open(0); // abre dispositivo de video de 铆ndice 0 //
        take.read(take_ima); //Captura imagen
        Image salida = mostrar.sacar_img(take_ima);
        take.release();
        label_take.setIcon(new ImageIcon(salida));
    }

    private void b_gris_fActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        gris = img.a_gris(take_ima);
        Image salida = mostrar.sacar_img(gris);
        label_take.setIcon(new ImageIcon(salida));
    }

    private void b_grafica_fActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        histo = otsu.imageHistogram(img.a_buffer(take_ima));
        try {
            valor_umbral = otsu.umbral_Otsu(gris, histo);
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        CONTENEDOR.addTab("Histograma_t", null, pinta.creados(histo, valor_umbral));
    }

    private void b_binario_fActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        binario = img.a_binario(gris, valor_umbral);
        Image salida = mostrar.sacar_img(binario);
        label_take.setIcon(new ImageIcon(salida));
    }

    private void b_filtro_fActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        matriz_entrada = eti.mat_a_matriz(binario);
        matriz_salida = eti.marca(matriz_entrada);
        num_marcas = points.cuenta_marcas(matriz_salida);
        puntos = points.cuenta_puntos_b(matriz_salida, num_marcas);
        solo_flechas = points.solo_flechas(num_marcas, puntos);
        pre_end = eti.contorno_pila(binario, matriz_salida, solo_flechas);
        Image salida = mostrar.sacar_img(pre_end);
        label_take.setIcon(new ImageIcon(salida));
    }

    private void b_sobreponer_fActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        end = eti.contorno_real(take_ima, binario, matriz_salida, solo_flechas);
        Image salida = mostrar.sacar_img(end);
        label_take.setIcon(new ImageIcon(salida));
    }

    private void open_camActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        take_ima = Imgcodecs.imread("/home/themisamus/NetBeansProjects/Proyecto_Final/aun_no.jpg");
        Image salida = mostrar.sacar_img(take_ima);
        label_take.setIcon(new ImageIcon(salida));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Principal().setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTabbedPane CONTENEDOR;
    private javax.swing.JButton b_binario;
    private javax.swing.JButton b_binario_f;
    private javax.swing.JButton b_carga;
    private javax.swing.JButton b_filtro;
    private javax.swing.JButton b_filtro_f;
    private javax.swing.JButton b_grafica;
    private javax.swing.JButton b_grafica_f;
    private javax.swing.JButton b_gris;
    private javax.swing.JButton b_gris_f;
    private javax.swing.JButton b_sobreponer;
    private javax.swing.JButton b_sobreponer_f;
    private javax.swing.JButton b_take1;
    private javax.swing.JPanel contiene_foto;
    private javax.swing.JPanel contiene_imagen;
    private javax.swing.JLabel label_load;
    private javax.swing.JLabel label_take;
    private javax.swing.JButton open_cam;
    // End of variables declaration                   
}
